import React, { useState } from "react";
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";
import { format, parseISO, startOfDay, endOfDay, isWithinInterval } from "date-fns";
import logo from "./logo.jpg";
import { Download } from "lucide-react";

// Register PDFMake fonts
pdfMake.vfs = pdfFonts.pdfMake.vfs;

const PDFGenerator = ({ reportType, dateFilter, data, clients, products, categories, userId }) => {
  const [loading, setLoading] = useState(false);

  const generatePDF = async () => {
    setLoading(true);
    try {
      // Convert logo to base64
      const logoBase64 = await new Promise((resolve) => {
        const img = new Image();
        img.src = logo;
        img.onload = () => {
          const canvas = document.createElement("canvas");
          canvas.width = img.width;
          canvas.height = img.height;
          const ctx = canvas.getContext("2d");
          ctx.drawImage(img, 0, 0);
          resolve(canvas.toDataURL("image/jpeg"));
        };
      });

      // Filter data
      const dataset = reportType === "sales" ? data.sales : reportType === "debts" ? data.debts : data.expenses;
      const filteredData = dataset.filter(item => {
        if (dateFilter.type === "all" || !item.createdAt) return true;
        const itemDate = item.createdAt.toDate ? item.createdAt.toDate() : new Date(item.createdAt);
        const start = dateFilter.startDate ? parseISO(dateFilter.startDate) : null;
        const end = dateFilter.endDate ? parseISO(dateFilter.endDate) : null;
        return start && end ? isWithinInterval(itemDate, { start: startOfDay(start), end: endOfDay(end) }) : true;
      });

      // Define table headers and body
      let tableWidths = [];
      let tableHeader = [];
      const tableBody = [[]];

      if (reportType === "sales") {
        tableWidths = ["*", "*", "auto", "auto", "auto"];
        tableHeader = ["Client", "Product", "Quantity", "Amount (UGX)", "Date"];
        tableBody[0] = tableHeader;
        filteredData.forEach(item => {
          tableBody.push([
            item.client || "-",
            item.product || "-",
            item.quantity || 0,
            (item.amount || 0).toLocaleString(),
            item.createdAt ? format(item.createdAt.toDate(), "MMM dd, yyyy") : "-",
          ]);
        });
      } else if (reportType === "debts") {
        tableWidths = ["*", "auto", "auto", "auto"];
        tableHeader = ["Debtor", "Amount (UGX)", "Status", "Date"];
        tableBody[0] = tableHeader;
        filteredData.forEach(item => {
          tableBody.push([
            item.client || "-",
            (item.amount || 0).toLocaleString(),
            item.amount === 0 ? "Paid" : "Pending",
            item.createdAt ? format(item.createdAt.toDate(), "MMM dd, yyyy") : "-",
          ]);
        });
      } else {
        tableWidths = ["*", "auto", "*", "*", "auto"];
        tableHeader = ["Category", "Amount (UGX)", "Description", "Payee", "Date"];
        tableBody[0] = tableHeader;
        filteredData.forEach(item => {
          tableBody.push([
            item.category || "-",
            (typeof item.amount === "number" ? item.amount : parseFloat(item.amount) || 0).toLocaleString(),
            item.description || "-",
            item.payee || "-",
            item.createdAt ? format(item.createdAt.toDate(), "MMM dd, yyyy") : "-",
          ]);
        });
      }

      // PDF document definition
      const docDefinition = {
        pageSize: "A4",
        pageMargins: [40, 80, 40, 60],
        header: {
          margin: [40, 20, 40, 0],
          columns: [
            { image: logoBase64, width: 60, alignment: "left" },
            {
              stack: [
                { text: "RICHMOND MANUFACTURER'S LTD", style: "headerTitle" },
                { text: "Plot 19191, Kimwanyi Road, Nakwero, Wakiso District", style: "headerSubtitle" },
                { text: "Kira Municipality, Kira Division, Tel: 0705555498 / 0776 210570", style: "headerSubtitle" },
                { text: `Date: ${format(new Date(), "MMM dd, yyyy")}`, style: "headerSubtitle" },
              ],
              alignment: "right",
            },
          ],
        },
        footer: {
          margin: [40, 0, 40, 20],
          text: `Generated by RichBooks on ${format(new Date(), "MMM dd, yyyy HH:mm")}`,
          alignment: "center",
          style: "footer",
        },
        content: [
          { text: `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`, style: "title" },
          dateFilter.type !== "all" && {
            text: `Period: ${dateFilter.startDate ? format(parseISO(dateFilter.startDate), "MMM dd, yyyy") : "All"} - ${dateFilter.endDate ? format(parseISO(dateFilter.endDate), "MMM dd, yyyy") : "All"}`,
            style: "subtitle",
            margin: [0, 5, 0, 10],
          },
          {
            table: {
              headerRows: 1,
              widths: tableWidths,
              body: tableBody,
            },
            layout: {
              fillColor: (rowIndex) => (rowIndex === 0 ? "#1e3a8a" : rowIndex % 2 === 0 ? "#f9fafb" : "#ffffff"),
              hLineColor: () => "#d1d5db",
              vLineColor: () => "#d1d5db",
              hLineWidth: () => 1,
              vLineWidth: () => 1,
            },
          },
        ],
        styles: {
          headerTitle: { fontSize: 16, bold: true, color: "#1e3a8a", margin: [0, 0, 0, 5] },
          headerSubtitle: { fontSize: 10, color: "#374151", margin: [0, 2, 0, 2] },
          title: { fontSize: 18, bold: true, color: "#1e3a8a", margin: [0, 10, 0, 10] },
          subtitle: { fontSize: 12, color: "#374151", margin: [0, 5, 0, 5] },
          footer: { fontSize: 10, color: "#374151", italics: true },
        },
        defaultStyle: { fontSize: 10, color: "#111827" },
      };

      pdfMake.createPdf(docDefinition).download(`${reportType}_report_${format(new Date(), "yyyy-MM-dd")}.pdf`);
    } catch (error) {
      console.error("Error generating PDF:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <button
      onClick={generatePDF}
      disabled={loading}
      className="btn-primary flex items-center gap-2"
    >
      <Download className="w-5 h-5" />
      <span>{loading ? "Generating..." : "Download PDF"}</span>
    </button>
  );
};

export default PDFGenerator;